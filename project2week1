% Vehicle parameters
vehicle_width = 5; % Width of the vehicle
vehicle_length = 10; % Length of the vehicle

% Initial position and orientation of the vehicle
initial_x = x(1);
initial_y = y(1);
initial_angle = 0;

% Calculate rectangle vertices
rect_vertices = [initial_x - vehicle_width/2, initial_y - vehicle_length/2;...
                  initial_x + vehicle_width/2, initial_y - vehicle_length/2;...
                  initial_x + vehicle_width/2, initial_y + vehicle_length/2;...
                  initial_x - vehicle_width/2, initial_y + vehicle_length/2];

% Rotate rectangle vertices
rotation_matrix = [cos(initial_angle), -sin(initial_angle); sin(initial_angle), cos(initial_angle)];
rotated_rect_vertices = rect_vertices * rotation_matrix;

% Plot the vehicle path
plot(initial_x, initial_y, 'blue', 'LineWidth', 2);

% Plot the rotated rectangle (vehicle) using patch
vehicle_patch = patch('Vertices', rotated_rect_vertices, 'Faces', [1, 2, 3, 4], 'EdgeColor', 'blue', 'FaceColor', 'blue');

% Simulation loop
for i = 2:length(x)
    % Update position and orientation
    current_x = x(i);
    current_y = y(i);
    current_angle = atan2(y(i) - y(i-1), x(i) - x(i-1)); % Calculate angle between consecutive points
    
    % Update rectangle vertices and rotate
    rect_vertices = [current_x - vehicle_width/2, current_y - vehicle_length/2;...
                      current_x + vehicle_width/2, current_y - vehicle_length/2;...
                      current_x + vehicle_width/2, current_y + vehicle_length/2;...
                      current_x - vehicle_width/2, current_y + vehicle_length/2];
    
    rotated_rect_vertices = rect_vertices * [cos(current_angle), -sin(current_angle); sin(current_angle), cos(current_angle)];
    
    % Update vehicle patch position and rotation
    set(vehicle_patch, 'Vertices', rotated_rect_vertices);
    
    % Pause to visualize the animation
    pause(0.1);
end
